/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package de.ithock.idea.fishlang.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static de.ithock.idea.fishlang.psi.FishElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_FishLexer.flex</tt>
 */
public class _FishLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15680 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\1\1\7\13\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\22\12\13"+
    "\1\24\1\13\1\25\1\24\1\13\1\26\1\24\1\13\1\27\1\30\1\13\1\31\1\32\1\1\1\31"+
    "\4\13\1\33\6\13\1\34\1\35\1\36\1\1\3\13\1\37\6\13\1\16\1\40\2\13\1\41\2\13"+
    "\1\42\1\1\1\13\1\43\4\1\1\13\1\44\1\1\1\45\1\22\7\13\1\46\1\24\1\34\1\47\1"+
    "\35\1\50\1\51\1\52\1\46\1\16\1\53\1\47\1\35\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\22\1\35\1\62\1\63\1\64\1\46\1\65\1\66\1\47\1\35\1\62\1\67\1\70\1\46\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\57\1\1\1\100\1\101\1\35\1\102\1\103\1\104"+
    "\1\46\1\1\1\100\1\101\1\35\1\105\1\103\1\106\1\46\1\107\1\110\1\101\1\13\1"+
    "\37\1\111\1\112\1\46\1\113\1\114\1\115\1\13\1\116\1\117\1\120\1\57\1\121\1"+
    "\24\2\13\1\31\1\122\1\123\2\1\1\124\1\125\1\126\1\127\1\130\1\131\2\1\1\64"+
    "\1\132\1\123\1\133\1\134\1\13\1\135\1\24\1\136\1\134\1\13\1\135\1\137\3\1"+
    "\4\13\1\123\4\13\1\140\2\13\1\141\2\13\1\142\24\13\1\143\1\144\2\13\1\143"+
    "\2\13\1\145\1\146\1\14\3\13\1\146\3\13\1\37\2\1\1\13\1\1\5\13\1\147\1\24\45"+
    "\13\1\150\1\13\1\24\1\31\4\13\1\151\1\152\1\153\1\154\1\13\1\154\1\13\1\155"+
    "\1\153\1\156\5\13\1\157\1\123\1\1\1\160\1\123\5\13\1\26\2\13\1\31\4\13\1\60"+
    "\1\13\1\122\2\43\1\57\1\13\1\42\1\154\2\13\1\43\1\13\1\161\1\123\2\1\1\13"+
    "\1\43\3\13\1\122\1\13\1\150\2\123\1\162\1\122\4\1\4\13\1\43\1\123\1\163\1"+
    "\155\3\13\1\40\3\13\1\155\3\13\1\26\1\164\1\40\1\13\1\42\1\152\4\1\1\165\1"+
    "\13\1\166\17\13\1\167\21\13\1\147\2\13\1\147\1\170\1\13\1\42\3\13\1\171\1"+
    "\172\1\173\1\135\1\172\2\1\1\174\1\175\1\64\1\176\1\1\1\177\1\1\1\135\3\1"+
    "\2\13\1\64\1\200\1\201\1\202\1\203\1\204\1\1\2\13\1\152\62\1\1\205\2\13\1"+
    "\161\161\1\2\13\1\122\2\13\1\122\10\13\1\206\1\155\2\13\1\141\3\13\1\207\1"+
    "\175\1\13\1\210\4\211\2\13\2\1\1\175\35\1\1\212\1\1\1\24\1\213\1\24\4\13\1"+
    "\214\1\24\4\13\1\142\1\215\1\13\1\42\1\24\4\13\1\122\1\1\1\13\1\31\3\1\1\13"+
    "\40\1\133\13\1\60\4\1\135\13\1\60\2\1\10\13\1\135\4\1\2\13\1\42\20\13\1\135"+
    "\1\13\1\216\1\1\3\13\1\217\7\13\1\16\1\1\1\220\1\221\5\13\1\222\1\13\1\122"+
    "\1\26\3\1\1\220\2\13\1\26\1\1\3\13\1\155\4\13\1\60\1\123\1\13\1\223\1\40\1"+
    "\13\1\42\2\13\1\155\1\13\1\135\4\13\1\224\1\123\1\13\1\225\3\13\1\210\1\42"+
    "\1\123\1\13\1\115\4\13\1\32\1\160\1\13\1\226\1\227\1\230\1\211\2\13\1\142"+
    "\1\60\7\13\1\231\1\123\72\13\1\155\1\13\1\232\2\13\1\43\20\1\26\13\1\42\6"+
    "\13\1\161\2\1\1\210\1\233\1\35\1\234\1\235\6\13\1\16\1\1\1\236\25\13\1\42"+
    "\1\1\4\13\1\221\2\13\1\26\2\1\1\43\1\13\1\1\1\13\1\237\1\240\2\1\1\136\7\13"+
    "\1\135\1\1\1\123\1\24\1\241\1\24\1\31\1\205\4\13\1\122\1\242\1\243\2\1\1\244"+
    "\1\13\1\14\1\245\2\42\2\1\7\13\1\31\4\1\3\13\1\154\7\1\1\246\10\1\1\13\1\135"+
    "\3\13\2\64\1\1\2\13\1\1\1\13\1\31\2\13\1\31\1\13\1\42\2\13\1\247\1\250\2\1"+
    "\11\13\1\42\1\123\2\13\1\247\1\13\1\43\2\13\1\26\3\13\1\155\11\1\23\13\1\210"+
    "\1\13\1\60\1\26\11\1\1\251\2\13\1\252\1\13\1\60\1\13\1\210\1\13\1\122\4\1"+
    "\1\13\1\253\1\13\1\60\1\13\1\161\4\1\3\13\1\254\4\1\1\255\1\256\1\13\1\257"+
    "\2\1\1\13\1\135\1\13\1\135\2\1\1\134\1\13\1\210\1\1\3\13\1\60\1\13\1\60\1"+
    "\13\1\32\1\13\1\16\6\1\4\13\1\152\3\1\3\13\1\32\3\13\1\32\60\1\4\13\1\210"+
    "\1\1\1\57\1\175\3\13\1\31\1\1\1\13\1\152\1\123\3\13\1\260\1\1\2\13\1\261\4"+
    "\13\1\262\1\263\2\1\1\13\1\22\1\13\1\264\4\1\1\265\1\27\1\152\3\13\1\31\1"+
    "\123\1\34\1\47\1\35\1\62\1\67\1\266\1\267\1\154\10\1\4\13\1\31\1\123\2\1\4"+
    "\13\1\270\1\123\12\1\3\13\1\271\1\64\1\272\2\1\4\13\1\273\1\123\2\1\3\13\1"+
    "\26\1\123\3\1\1\13\1\102\1\43\1\123\26\1\4\13\1\123\1\175\34\1\3\13\1\152"+
    "\20\1\1\35\2\13\1\14\1\64\1\123\1\1\1\221\1\13\1\221\1\134\1\210\64\1\71\13"+
    "\1\161\6\1\6\13\1\122\1\1\14\13\1\155\53\1\2\13\1\122\75\1\44\13\1\210\33"+
    "\1\43\13\1\152\1\13\1\122\1\123\6\1\1\13\1\42\1\154\3\13\1\210\1\155\1\123"+
    "\1\236\1\274\1\13\67\1\4\13\1\154\2\13\1\122\1\175\1\13\4\1\1\64\1\1\76\13"+
    "\1\135\1\1\57\13\1\32\20\1\1\16\77\1\6\13\1\31\1\135\1\152\1\275\114\1\1\276"+
    "\1\277\1\300\1\1\1\301\11\1\1\302\33\1\5\13\1\136\3\13\1\153\1\303\1\304\1"+
    "\305\3\13\1\306\1\307\1\13\1\310\1\311\1\101\24\13\1\271\1\13\1\101\1\142"+
    "\1\13\1\142\1\13\1\136\1\13\1\136\1\122\1\13\1\122\1\13\1\35\1\13\1\35\1\13"+
    "\1\312\3\313\40\1\3\13\1\232\2\13\1\135\1\314\1\176\1\163\1\24\25\1\1\14\1"+
    "\222\1\315\75\1\14\13\1\154\1\210\2\1\4\13\1\31\1\123\112\1\1\305\1\13\1\316"+
    "\1\317\1\320\1\321\1\322\1\323\1\324\1\43\1\325\1\43\47\1\1\13\1\161\1\13"+
    "\1\161\1\13\1\161\47\1\55\13\1\210\2\1\103\13\1\154\15\13\1\42\150\13\1\16"+
    "\25\1\41\13\1\42\56\1\17\13\41\1");

  /* The ZZ_CMAP_A table has 3424 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\44\1\2\2\1\1\3\22\0\1\45\1\21\1\10\1\4\1\101\2\21\1\6\1\73\1\74\1"+
    "\46\1\17\1\41\1\40\1\36\1\12\1\31\1\35\10\26\1\20\1\72\1\14\1\21\1\15\1\5"+
    "\1\42\2\30\1\33\1\111\1\37\1\107\1\16\1\103\1\104\4\16\1\110\1\106\4\16\1"+
    "\105\1\32\1\16\1\102\1\27\2\16\1\77\1\7\1\100\1\34\1\11\1\34\1\54\1\56\1\62"+
    "\1\61\1\53\1\22\1\57\1\25\1\23\1\16\1\65\1\55\1\67\1\60\1\63\1\71\1\16\1\51"+
    "\1\24\1\50\1\52\1\70\1\64\1\66\2\16\1\75\1\47\1\76\1\13\6\0\1\1\24\0\1\34"+
    "\12\0\1\34\4\0\1\34\5\0\27\34\1\0\12\34\4\0\14\34\16\0\5\34\7\0\1\34\1\0\1"+
    "\34\1\0\5\34\1\0\2\34\2\0\4\34\1\0\1\34\6\0\1\34\1\0\3\34\1\0\1\34\1\0\4\34"+
    "\1\0\23\34\1\0\11\34\1\0\26\34\2\0\1\34\6\0\10\34\10\0\16\34\1\0\1\34\1\0"+
    "\2\34\1\0\2\34\1\0\1\34\10\0\13\34\5\0\3\34\15\0\12\43\4\0\6\34\1\0\10\34"+
    "\2\0\12\34\1\0\6\34\12\43\3\34\2\0\14\34\2\0\3\34\12\43\14\34\4\0\1\34\5\0"+
    "\16\34\2\0\14\34\4\0\5\34\1\0\10\34\6\0\20\34\2\0\12\43\1\34\2\0\16\34\1\0"+
    "\1\34\3\0\4\34\2\0\11\34\2\0\2\34\2\0\4\34\10\0\1\34\4\0\2\34\1\0\1\34\1\0"+
    "\3\34\1\0\6\34\4\0\2\34\1\0\2\34\1\0\2\34\1\0\2\34\2\0\1\34\1\0\5\34\4\0\2"+
    "\34\2\0\3\34\3\0\1\34\7\0\4\34\1\0\1\34\7\0\12\43\6\34\13\0\3\34\1\0\11\34"+
    "\1\0\2\34\1\0\2\34\1\0\5\34\2\0\12\34\1\0\3\34\1\0\3\34\2\0\1\34\30\0\1\34"+
    "\7\0\3\34\1\0\10\34\2\0\6\34\2\0\2\34\2\0\3\34\10\0\2\34\4\0\2\34\1\0\1\34"+
    "\1\0\1\34\20\0\2\34\1\0\6\34\3\0\3\34\1\0\4\34\3\0\2\34\1\0\1\34\1\0\2\34"+
    "\3\0\2\34\3\0\3\34\3\0\14\34\4\0\5\34\3\0\3\34\1\0\4\34\2\0\1\34\6\0\1\34"+
    "\10\0\4\34\1\0\10\34\1\0\3\34\1\0\30\34\3\0\10\34\1\0\3\34\1\0\4\34\7\0\2"+
    "\34\1\0\3\34\5\0\4\34\1\0\5\34\2\0\4\34\5\0\2\34\7\0\1\34\2\0\2\34\16\0\3"+
    "\34\1\0\10\34\1\0\7\34\1\0\3\34\1\0\5\34\5\0\4\34\7\0\1\34\12\0\6\34\2\0\2"+
    "\34\1\0\22\34\3\0\10\34\1\0\11\34\1\0\1\34\2\0\7\34\3\0\1\34\4\0\6\34\1\0"+
    "\1\34\1\0\10\34\2\0\2\34\14\0\17\34\1\0\12\43\7\0\2\34\1\0\1\34\2\0\2\34\1"+
    "\0\1\34\2\0\1\34\6\0\4\34\1\0\7\34\1\0\3\34\1\0\1\34\1\0\1\34\2\0\2\34\1\0"+
    "\15\34\1\0\3\34\2\0\5\34\1\0\1\34\1\0\6\34\2\0\12\43\2\0\4\34\10\0\2\34\13"+
    "\0\1\34\1\0\1\34\1\0\1\34\4\0\12\34\1\0\24\34\3\0\5\34\1\0\12\34\6\0\1\34"+
    "\11\0\12\43\4\34\2\0\6\34\1\0\1\34\5\0\1\34\2\0\13\34\1\0\15\34\1\0\4\34\2"+
    "\0\7\34\1\0\1\34\1\0\4\34\2\0\1\34\1\0\4\34\2\0\7\34\1\0\1\34\1\0\4\34\2\0"+
    "\16\34\2\0\6\34\2\0\15\34\2\0\14\34\3\0\13\34\7\0\15\34\1\0\7\34\13\0\4\34"+
    "\14\0\1\34\1\0\2\34\14\0\4\34\3\0\1\34\4\0\2\34\15\0\3\34\2\0\12\34\15\0\1"+
    "\34\23\0\5\34\12\43\3\0\6\34\1\0\23\34\1\0\2\34\6\0\6\34\5\0\15\34\1\0\1\34"+
    "\1\0\1\34\1\0\1\34\1\0\6\34\1\0\7\34\1\0\1\34\3\0\3\34\1\0\7\34\3\0\4\34\2"+
    "\0\6\34\14\0\2\1\25\0\1\34\4\0\1\34\14\0\1\34\15\0\1\34\2\0\1\34\4\0\1\34"+
    "\2\0\12\34\1\0\1\34\3\0\5\34\6\0\1\34\1\0\1\34\1\0\1\34\1\0\4\34\1\0\13\34"+
    "\2\0\4\34\5\0\5\34\4\0\1\34\7\0\17\34\6\0\15\34\7\0\10\34\11\0\7\34\1\0\7"+
    "\34\6\0\3\34\11\0\5\34\2\0\5\34\3\0\7\34\2\0\2\34\2\0\3\34\5\0\13\34\12\43"+
    "\2\34\4\0\3\34\1\0\12\34\1\0\1\34\7\0\11\34\2\0\27\34\2\0\15\34\3\0\1\34\1"+
    "\0\1\34\2\0\1\34\16\0\1\34\12\43\5\34\3\0\5\34\12\0\6\34\2\0\6\34\2\0\6\34"+
    "\11\0\13\34\1\0\2\34\2\0\7\34\4\0\5\34\3\0\5\34\5\0\12\34\1\0\5\34\1\0\1\34"+
    "\1\0\2\34\1\0\2\34\1\0\12\34\3\0\15\34\3\0\2\34\30\0\16\34\4\0\1\34\2\0\6"+
    "\34\2\0\6\34\2\0\6\34\2\0\3\34\3\0\14\34\1\0\16\34\1\0\2\34\1\0\1\34\15\0"+
    "\1\34\2\0\4\34\4\0\10\34\1\0\5\34\12\0\6\34\2\0\1\34\1\0\14\34\1\0\2\34\3"+
    "\0\1\34\2\0\4\34\1\0\2\34\12\0\10\34\6\0\6\34\1\0\2\34\5\0\10\34\1\0\3\34"+
    "\1\0\13\34\4\0\3\34\4\0\6\34\1\0\12\43\4\34\2\0\1\34\11\0\5\34\5\0\3\34\3"+
    "\0\12\43\1\34\1\0\1\34\3\0\10\34\6\0\1\34\1\0\7\34\1\0\1\34\1\0\4\34\1\0\2"+
    "\34\6\0\1\34\5\0\7\34\2\0\7\34\3\0\6\34\1\0\1\34\10\0\6\34\2\0\10\34\10\0"+
    "\6\34\2\0\1\34\3\0\1\34\13\0\10\34\5\0\15\34\3\0\2\34\6\0\5\34\3\0\6\34\10"+
    "\0\10\34\2\0\7\34\16\0\4\34\4\0\3\34\15\0\1\34\2\0\2\34\2\0\4\34\1\0\14\34"+
    "\1\0\1\34\1\0\7\34\1\0\21\34\1\0\4\34\2\0\10\34\1\0\7\34\1\0\14\34\1\0\4\34"+
    "\1\0\5\34\1\0\1\34\3\0\11\34\1\0\10\34\2\0\22\43\5\0\1\34\12\0\2\34\1\0\2"+
    "\34\1\0\5\34\6\0\2\34\1\0\1\34\2\0\1\34\1\0\12\34\1\0\4\34\1\0\1\34\1\0\1"+
    "\34\6\0\1\34\4\0\1\34\1\0\1\34\1\0\1\34\1\0\3\34\1\0\2\34\1\0\1\34\2\0\1\34"+
    "\1\0\1\34\1\0\1\34\1\0\1\34\1\0\1\34\1\0\2\34\1\0\1\34\2\0\4\34\1\0\7\34\1"+
    "\0\4\34\1\0\4\34\1\0\1\34\1\0\12\34\1\0\5\34\1\0\3\34\1\0\5\34\1\0\5\34");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\3\1\2\4\2\1"+
    "\1\4\1\1\1\5\3\4\2\6\1\1\1\4\1\7"+
    "\1\4\1\10\1\11\1\12\1\13\14\4\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\3\4\2\0"+
    "\1\2\3\3\3\24\1\25\2\24\3\4\1\0\1\4"+
    "\2\26\2\0\1\4\3\0\3\4\1\27\1\30\3\4"+
    "\1\6\1\31\1\6\1\0\4\32\1\11\2\4\1\33"+
    "\6\4\1\34\6\4\1\35\1\4\1\36\1\37\3\4"+
    "\1\40\3\4\5\0\1\41\1\42\1\43\1\4\2\26"+
    "\1\44\1\0\1\45\1\46\2\4\1\47\1\50\2\4"+
    "\1\0\1\26\1\32\1\26\1\32\3\4\1\51\3\4"+
    "\1\52\3\4\1\53\2\4\1\54\3\4\1\55\3\4"+
    "\2\56\2\57\1\0\1\4\1\44\4\4\1\0\1\31"+
    "\2\26\1\60\1\4\1\61\1\62\1\63\1\64\1\65"+
    "\3\4\1\66\1\4\1\67\3\4\1\70\2\4\1\71"+
    "\3\4\1\72\1\73\2\4\1\74\1\75\1\76\2\4"+
    "\1\77\1\100\1\101\4\4\1\102\1\4\1\103\1\104"+
    "\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\112\0\224\0\336\0\u0128\0\u0172\0\u01bc"+
    "\0\u0206\0\u0250\0\u029a\0\u02e4\0\u032e\0\u0378\0\112\0\u03c2"+
    "\0\u040c\0\u0456\0\u04a0\0\u04ea\0\u0534\0\u057e\0\112\0\u05c8"+
    "\0\112\0\u0612\0\112\0\112\0\u065c\0\u06a6\0\u06f0\0\u073a"+
    "\0\u0784\0\u07ce\0\u0818\0\u0862\0\u08ac\0\u08f6\0\u0940\0\u098a"+
    "\0\112\0\112\0\112\0\112\0\112\0\112\0\112\0\112"+
    "\0\u09d4\0\u0a1e\0\u0a68\0\u0ab2\0\u0afc\0\u0b46\0\u0b90\0\u0bda"+
    "\0\u0c24\0\u0b46\0\u0ab2\0\u0c6e\0\u0cb8\0\u0d02\0\u0d4c\0\u0d96"+
    "\0\u0de0\0\u0e2a\0\u0e74\0\u0ebe\0\u0f08\0\u0f52\0\u0f9c\0\u0fe6"+
    "\0\u1030\0\u107a\0\u10c4\0\u110e\0\u1158\0\u11a2\0\u11ec\0\u1030"+
    "\0\u1030\0\u1236\0\u1280\0\u12ca\0\u1314\0\u135e\0\u13a8\0\u13f2"+
    "\0\u143c\0\u1486\0\u14d0\0\u151a\0\u1564\0\u15ae\0\u15f8\0\u1030"+
    "\0\u1642\0\u168c\0\u16d6\0\u1720\0\u176a\0\u17b4\0\u1030\0\u17fe"+
    "\0\u1848\0\u1892\0\u18dc\0\u1926\0\u1970\0\u1030\0\u19ba\0\u1030"+
    "\0\u1030\0\u1a04\0\u1a4e\0\u1a98\0\u1030\0\u1ae2\0\u1b2c\0\u1b76"+
    "\0\u1bc0\0\u1c0a\0\u1c54\0\u1c9e\0\u1ce8\0\u0c6e\0\u0d02\0\u0d4c"+
    "\0\u1d32\0\u0de0\0\u110e\0\u1d7c\0\u1dc6\0\u0b46\0\u10c4\0\u1e10"+
    "\0\u1e5a\0\u1030\0\u1030\0\u1ea4\0\u1eee\0\u1f38\0\u1f82\0\u1fcc"+
    "\0\u2016\0\u2060\0\u20aa\0\u20f4\0\u213e\0\u1030\0\u2188\0\u21d2"+
    "\0\u221c\0\u1030\0\u2266\0\u22b0\0\u22fa\0\u1030\0\u2344\0\u238e"+
    "\0\u1030\0\u23d8\0\u2422\0\u246c\0\u1030\0\u24b6\0\u2500\0\u254a"+
    "\0\u0ab2\0\u0b46\0\u1c54\0\u0b46\0\u2594\0\u25de\0\u0f9c\0\u2628"+
    "\0\u2672\0\u26bc\0\u2706\0\u2750\0\u2750\0\u14d0\0\u2060\0\u1030"+
    "\0\u279a\0\u1030\0\u1030\0\u1030\0\u1030\0\u1030\0\u27e4\0\u282e"+
    "\0\u2878\0\u1030\0\u28c2\0\u1030\0\u290c\0\u2956\0\u29a0\0\u1030"+
    "\0\u29ea\0\u2a34\0\u1030\0\u2a7e\0\u2ac8\0\u2b12\0\u1030\0\u1030"+
    "\0\u2b5c\0\u2ba6\0\u1030\0\u1030\0\u1030\0\u2bf0\0\u2c3a\0\u1030"+
    "\0\u1030\0\u1030\0\u2c84\0\u2cce\0\u2d18\0\u2d62\0\u1030\0\u2dac"+
    "\0\u2d18\0\u1030\0\u1030";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\2\1\15\1\16\1\17"+
    "\1\2\1\20\1\21\1\22\1\15\1\23\2\15\1\24"+
    "\2\15\1\2\1\23\1\25\1\15\1\26\1\27\2\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\15\1\37"+
    "\1\40\1\41\1\42\1\15\1\43\1\44\1\45\1\46"+
    "\1\47\2\15\1\50\2\15\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\2\15\1\62\1\15"+
    "\1\63\2\15\6\0\1\64\1\0\1\65\103\0\1\66"+
    "\3\0\1\64\1\0\1\65\101\0\2\67\2\0\1\67"+
    "\1\0\1\70\1\67\1\71\101\67\10\0\1\65\105\0"+
    "\2\72\1\73\1\0\17\72\1\74\1\72\1\75\1\76"+
    "\1\77\1\72\1\75\6\72\2\0\4\72\1\76\7\72"+
    "\1\77\3\72\1\74\23\72\6\0\1\64\111\0\1\64"+
    "\1\0\1\65\1\100\1\101\3\0\1\102\1\103\2\0"+
    "\12\102\1\0\1\102\1\103\2\102\1\0\2\104\4\0"+
    "\22\102\10\0\10\102\6\0\1\64\1\0\1\65\1\105"+
    "\1\104\3\0\1\105\1\106\2\0\12\105\1\0\1\105"+
    "\1\106\2\105\1\0\2\104\4\0\22\105\10\0\10\105"+
    "\6\0\1\64\1\0\1\65\1\0\1\107\105\0\1\64"+
    "\1\0\1\65\1\110\4\0\2\110\2\0\12\110\1\0"+
    "\4\110\7\0\22\110\10\0\10\110\6\0\1\64\1\0"+
    "\1\65\1\102\1\101\3\0\1\111\1\112\1\113\1\0"+
    "\12\111\1\0\1\111\1\112\2\111\1\0\2\104\4\0"+
    "\22\111\10\0\10\111\6\0\1\64\1\0\1\65\1\103"+
    "\1\114\3\0\2\103\2\0\12\103\1\0\4\103\7\0"+
    "\22\103\10\0\10\103\6\0\1\64\1\0\1\65\1\102"+
    "\1\101\3\0\1\111\1\112\1\113\1\0\12\111\1\0"+
    "\1\111\1\112\2\111\1\0\2\104\4\0\2\111\1\115"+
    "\1\111\1\116\6\111\1\117\6\111\10\0\10\111\6\0"+
    "\1\64\1\0\1\65\1\102\1\101\3\0\1\111\1\112"+
    "\1\113\1\0\1\120\11\111\1\0\1\111\1\112\2\111"+
    "\1\0\2\104\4\0\10\111\1\121\11\111\10\0\10\111"+
    "\6\0\1\64\1\0\1\65\1\102\1\101\3\0\1\111"+
    "\1\112\1\113\1\0\12\111\1\0\1\111\1\112\2\111"+
    "\1\0\2\104\4\0\3\111\1\122\7\111\1\123\1\124"+
    "\5\111\10\0\10\111\6\0\1\64\1\0\1\65\1\102"+
    "\1\101\3\0\1\102\1\103\2\0\4\102\1\125\2\102"+
    "\1\125\2\102\1\0\1\125\1\126\2\102\1\0\2\104"+
    "\4\0\22\102\10\0\10\102\6\0\1\64\1\0\1\65"+
    "\1\102\1\101\3\0\1\102\1\103\2\0\4\102\1\127"+
    "\2\102\1\127\2\102\1\0\1\127\1\130\2\102\1\0"+
    "\2\104\4\0\22\102\10\0\10\102\6\0\1\64\1\0"+
    "\1\65\1\103\1\114\3\0\2\103\2\0\4\103\1\126"+
    "\2\103\1\126\2\103\1\0\1\126\3\103\7\0\22\103"+
    "\10\0\10\103\6\0\1\64\1\131\1\65\1\132\1\133"+
    "\3\0\1\132\1\103\2\0\12\132\1\0\1\132\1\134"+
    "\2\132\1\131\2\104\4\0\22\132\10\0\10\132\6\0"+
    "\1\64\1\0\1\65\2\104\3\0\1\104\3\0\12\104"+
    "\1\0\1\104\1\0\2\104\1\0\2\104\4\0\22\104"+
    "\10\0\10\104\6\0\1\64\1\0\1\65\34\0\1\135"+
    "\52\0\1\64\1\0\1\65\1\102\1\101\3\0\1\111"+
    "\1\112\1\113\1\0\12\111\1\0\1\111\1\112\2\111"+
    "\1\0\2\104\4\0\1\111\1\136\20\111\10\0\10\111"+
    "\6\0\1\64\1\0\1\65\1\102\1\101\3\0\1\111"+
    "\1\112\1\113\1\0\12\111\1\0\1\111\1\112\2\111"+
    "\1\0\2\104\4\0\3\111\1\137\13\111\1\140\2\111"+
    "\10\0\10\111\6\0\1\64\1\0\1\65\1\102\1\101"+
    "\3\0\1\111\1\112\1\113\1\0\12\111\1\0\1\111"+
    "\1\112\2\111\1\0\2\104\4\0\5\111\1\141\2\111"+
    "\1\142\1\111\1\143\3\111\1\144\3\111\10\0\10\111"+
    "\6\0\1\64\1\0\1\65\1\102\1\101\3\0\1\111"+
    "\1\112\1\113\1\0\12\111\1\0\1\111\1\112\2\111"+
    "\1\0\2\104\4\0\6\111\1\145\1\111\1\146\11\111"+
    "\10\0\10\111\6\0\1\64\1\0\1\65\1\102\1\101"+
    "\3\0\1\111\1\112\1\113\1\0\2\111\1\147\7\111"+
    "\1\0\1\111\1\112\2\111\1\0\2\104\4\0\3\111"+
    "\1\150\16\111\10\0\10\111\6\0\1\64\1\0\1\65"+
    "\1\102\1\101\3\0\1\111\1\112\1\113\1\0\12\111"+
    "\1\0\1\111\1\112\2\111\1\0\2\104\4\0\1\111"+
    "\1\151\1\111\1\152\16\111\10\0\10\111\6\0\1\64"+
    "\1\0\1\65\1\102\1\101\3\0\1\111\1\112\1\113"+
    "\1\0\12\111\1\0\1\111\1\112\2\111\1\0\2\104"+
    "\4\0\13\111\1\153\6\111\10\0\10\111\6\0\1\64"+
    "\1\0\1\65\1\102\1\101\3\0\1\111\1\112\1\113"+
    "\1\0\12\111\1\0\1\111\1\112\2\111\1\0\2\104"+
    "\4\0\3\111\1\154\16\111\10\0\10\111\6\0\1\64"+
    "\1\0\1\65\1\102\1\101\3\0\1\111\1\112\1\113"+
    "\1\0\12\111\1\0\1\111\1\112\2\111\1\0\2\104"+
    "\4\0\4\111\1\155\4\111\1\156\1\111\1\157\5\111"+
    "\1\160\10\0\10\111\6\0\1\64\1\0\1\65\1\102"+
    "\1\101\3\0\1\111\1\112\1\113\1\0\12\111\1\0"+
    "\1\111\1\112\2\111\1\0\2\104\4\0\1\111\1\161"+
    "\17\111\1\162\10\0\10\111\6\0\1\64\1\0\1\65"+
    "\1\102\1\101\3\0\1\111\1\112\1\113\1\0\3\111"+
    "\1\163\6\111\1\0\1\111\1\112\2\111\1\0\2\104"+
    "\4\0\22\111\10\0\10\111\6\0\1\64\1\0\1\65"+
    "\1\102\1\101\3\0\1\111\1\112\1\113\1\0\12\111"+
    "\1\0\1\111\1\112\2\111\1\0\2\104\4\0\4\111"+
    "\1\164\13\111\1\165\1\111\10\0\10\111\6\0\1\64"+
    "\1\0\1\65\1\102\1\101\3\0\1\111\1\112\1\113"+
    "\1\0\12\111\1\0\1\111\1\112\2\111\1\0\2\104"+
    "\4\0\22\111\10\0\1\111\1\166\6\111\6\0\1\64"+
    "\1\0\1\65\1\102\1\101\3\0\1\111\1\112\1\113"+
    "\1\0\12\111\1\0\1\111\1\112\2\111\1\0\2\104"+
    "\4\0\22\111\10\0\4\111\1\167\3\111\6\0\1\64"+
    "\1\0\1\65\1\102\1\101\3\0\1\111\1\112\1\113"+
    "\1\0\12\111\1\0\1\111\1\112\2\111\1\0\2\104"+
    "\4\0\22\111\10\0\2\111\1\170\5\111\1\171\3\172"+
    "\2\171\1\64\103\171\1\173\3\174\3\173\1\175\102\173"+
    "\112\0\2\67\2\0\1\67\1\0\104\67\1\70\1\67"+
    "\2\172\1\70\1\171\104\70\1\71\1\67\2\174\1\71"+
    "\1\173\104\71\22\0\1\176\3\0\1\176\1\0\2\176"+
    "\1\0\1\176\1\0\1\176\1\0\1\176\13\0\2\176"+
    "\1\0\1\176\2\0\2\176\24\0\1\176\1\0\1\176"+
    "\31\0\1\75\3\0\1\75\76\0\1\177\3\0\1\177"+
    "\1\0\2\177\1\0\1\177\1\0\1\177\1\0\1\177"+
    "\13\0\2\177\1\0\1\177\2\0\2\177\24\0\1\177"+
    "\1\0\1\177\16\0\1\200\3\0\4\200\1\0\2\200"+
    "\1\0\2\200\3\0\1\200\10\0\22\200\10\0\10\200"+
    "\11\0\1\102\1\101\3\0\1\102\1\103\2\0\1\201"+
    "\11\102\1\0\1\102\1\103\2\102\1\0\2\104\4\0"+
    "\22\102\10\0\10\102\11\0\1\105\1\104\3\0\1\105"+
    "\1\106\2\0\12\105\1\0\1\105\1\106\2\105\1\0"+
    "\2\104\4\0\22\105\10\0\10\105\11\0\1\102\1\101"+
    "\3\0\1\102\1\103\2\0\12\102\1\0\1\102\1\103"+
    "\2\102\1\0\2\104\4\0\22\102\10\0\10\102\11\0"+
    "\1\103\1\114\3\0\2\103\2\0\12\103\1\0\4\103"+
    "\7\0\22\103\10\0\10\103\11\0\2\104\3\0\1\104"+
    "\3\0\12\104\1\0\1\104\1\0\2\104\1\0\2\104"+
    "\4\0\22\104\10\0\10\104\11\0\1\105\1\202\3\0"+
    "\1\105\1\106\2\0\12\105\1\0\1\105\1\106\2\105"+
    "\1\0\2\104\4\0\22\105\10\0\10\105\11\0\1\106"+
    "\1\203\3\0\2\106\2\0\12\106\1\0\4\106\7\0"+
    "\22\106\10\0\10\106\11\0\1\204\4\0\2\204\2\0"+
    "\12\204\1\0\4\204\7\0\22\204\10\0\10\204\11\0"+
    "\1\110\1\205\2\0\1\206\2\110\2\0\12\110\1\0"+
    "\4\110\7\0\22\110\10\0\10\110\11\0\1\102\1\101"+
    "\3\0\1\111\1\112\1\113\1\0\12\111\1\0\1\111"+
    "\1\112\2\111\1\0\2\104\4\0\22\111\10\0\10\111"+
    "\11\0\1\103\1\114\3\0\2\112\1\113\1\0\12\112"+
    "\1\0\4\112\7\0\22\112\10\0\10\112\5\0\2\207"+
    "\2\0\3\207\2\0\16\207\1\0\6\207\3\0\1\207"+
    "\1\0\22\207\7\0\11\207\11\0\1\106\4\0\2\106"+
    "\2\0\12\106\1\0\4\106\7\0\22\106\10\0\10\106"+
    "\11\0\1\102\1\101\3\0\1\111\1\112\1\113\1\0"+
    "\12\111\1\0\1\111\1\112\2\111\1\0\2\104\4\0"+
    "\10\111\1\210\11\111\10\0\10\111\11\0\1\102\1\101"+
    "\3\0\1\111\1\112\1\113\1\0\12\111\1\0\1\111"+
    "\1\112\2\111\1\0\2\104\4\0\5\111\1\211\14\111"+
    "\10\0\10\111\11\0\1\102\1\101\3\0\1\111\1\112"+
    "\1\113\1\0\12\111\1\0\1\111\1\112\2\111\1\0"+
    "\2\104\4\0\1\111\1\212\20\111\10\0\10\111\11\0"+
    "\1\102\1\101\3\0\1\111\1\112\1\113\1\0\12\111"+
    "\1\0\1\111\1\112\2\111\1\0\2\104\4\0\1\213"+
    "\21\111\10\0\10\111\11\0\1\102\1\101\3\0\1\111"+
    "\1\112\1\113\1\0\12\111\1\0\1\111\1\112\2\111"+
    "\1\0\2\104\4\0\2\111\1\214\17\111\10\0\10\111"+
    "\11\0\1\102\1\101\3\0\1\111\1\112\1\113\1\0"+
    "\1\111\1\215\10\111\1\0\1\111\1\112\2\111\1\0"+
    "\2\104\4\0\22\111\10\0\10\111\11\0\1\102\1\101"+
    "\3\0\1\102\1\103\2\0\4\102\1\125\2\102\1\125"+
    "\2\102\1\0\1\125\1\126\2\102\1\0\2\104\4\0"+
    "\22\102\10\0\10\102\11\0\1\103\1\114\3\0\2\103"+
    "\2\0\4\103\1\126\2\103\1\126\2\103\1\0\1\126"+
    "\1\103\1\216\1\103\7\0\3\103\1\216\16\103\10\0"+
    "\10\103\11\0\1\102\1\101\3\0\1\102\1\103\2\0"+
    "\4\102\1\127\2\102\1\127\2\102\1\0\1\127\1\103"+
    "\2\102\1\0\2\104\4\0\22\102\10\0\10\102\11\0"+
    "\1\103\1\114\3\0\2\103\2\0\4\103\1\126\2\103"+
    "\1\126\2\103\1\0\1\126\3\103\7\0\22\103\10\0"+
    "\10\103\7\0\1\131\1\0\2\131\3\0\1\131\3\0"+
    "\12\131\1\0\5\131\6\0\22\131\10\0\10\131\7\0"+
    "\1\131\1\0\1\132\1\133\3\0\1\132\1\103\2\0"+
    "\12\132\1\0\1\132\1\134\2\132\1\131\2\104\4\0"+
    "\22\132\10\0\10\132\7\0\1\131\1\0\1\217\1\220"+
    "\3\0\1\217\1\106\2\0\12\217\1\0\1\217\1\221"+
    "\2\217\1\131\2\104\4\0\22\217\10\0\10\217\7\0"+
    "\1\131\1\0\1\134\1\222\3\0\1\134\1\103\2\0"+
    "\12\134\1\0\4\134\1\131\6\0\22\134\10\0\10\134"+
    "\45\0\1\135\55\0\1\102\1\101\3\0\1\111\1\112"+
    "\1\113\1\0\12\111\1\0\1\111\1\112\2\111\1\0"+
    "\2\104\4\0\2\111\1\223\17\111\10\0\10\111\11\0"+
    "\1\102\1\101\3\0\1\111\1\112\1\113\1\0\12\111"+
    "\1\0\1\111\1\112\2\111\1\0\2\104\4\0\1\224"+
    "\21\111\10\0\10\111\11\0\1\102\1\101\3\0\1\111"+
    "\1\112\1\113\1\0\2\111\1\225\7\111\1\0\1\111"+
    "\1\112\2\111\1\0\2\104\4\0\22\111\10\0\10\111"+
    "\11\0\1\102\1\101\3\0\1\111\1\112\1\113\1\0"+
    "\12\111\1\0\1\111\1\112\2\111\1\0\2\104\4\0"+
    "\11\111\1\226\10\111\10\0\10\111\11\0\1\102\1\101"+
    "\3\0\1\111\1\112\1\113\1\0\3\111\1\227\6\111"+
    "\1\0\1\111\1\112\2\111\1\0\2\104\4\0\22\111"+
    "\10\0\10\111\11\0\1\102\1\101\3\0\1\111\1\112"+
    "\1\113\1\0\1\111\1\230\10\111\1\0\1\111\1\112"+
    "\2\111\1\0\2\104\4\0\22\111\10\0\10\111\11\0"+
    "\1\102\1\101\3\0\1\111\1\112\1\113\1\0\12\111"+
    "\1\0\1\111\1\112\2\111\1\0\2\104\4\0\6\111"+
    "\1\231\13\111\10\0\10\111\11\0\1\102\1\101\3\0"+
    "\1\111\1\112\1\113\1\0\12\111\1\0\1\111\1\112"+
    "\2\111\1\0\2\104\4\0\11\111\1\232\10\111\10\0"+
    "\10\111\11\0\1\102\1\101\3\0\1\111\1\112\1\113"+
    "\1\0\2\111\1\233\7\111\1\0\1\111\1\112\2\111"+
    "\1\0\2\104\4\0\22\111\10\0\10\111\11\0\1\102"+
    "\1\101\3\0\1\111\1\112\1\113\1\0\12\111\1\0"+
    "\1\111\1\112\2\111\1\0\2\104\4\0\3\111\1\234"+
    "\16\111\10\0\10\111\11\0\1\102\1\101\3\0\1\111"+
    "\1\112\1\113\1\0\12\111\1\0\1\111\1\112\2\111"+
    "\1\0\2\104\4\0\7\111\1\235\12\111\10\0\10\111"+
    "\11\0\1\102\1\101\3\0\1\111\1\112\1\113\1\0"+
    "\12\111\1\0\1\111\1\112\2\111\1\0\2\104\4\0"+
    "\1\236\21\111\10\0\10\111\11\0\1\102\1\101\3\0"+
    "\1\111\1\112\1\113\1\0\1\237\11\111\1\0\1\111"+
    "\1\112\2\111\1\0\2\104\4\0\22\111\10\0\10\111"+
    "\11\0\1\102\1\101\3\0\1\111\1\112\1\113\1\0"+
    "\2\111\1\240\7\111\1\0\1\111\1\112\2\111\1\0"+
    "\2\104\4\0\1\241\21\111\10\0\10\111\11\0\1\102"+
    "\1\101\3\0\1\111\1\112\1\113\1\0\12\111\1\0"+
    "\1\111\1\112\2\111\1\0\2\104\4\0\10\111\1\242"+
    "\11\111\10\0\10\111\11\0\1\102\1\101\3\0\1\111"+
    "\1\112\1\113\1\0\12\111\1\0\1\111\1\112\2\111"+
    "\1\0\2\104\4\0\3\111\1\243\16\111\10\0\10\111"+
    "\11\0\1\102\1\101\3\0\1\111\1\112\1\113\1\0"+
    "\1\111\1\244\10\111\1\0\1\111\1\112\2\111\1\0"+
    "\2\104\4\0\22\111\10\0\10\111\11\0\1\102\1\101"+
    "\3\0\1\111\1\112\1\113\1\0\12\111\1\0\1\111"+
    "\1\112\2\111\1\0\2\104\4\0\10\111\1\245\11\111"+
    "\10\0\10\111\11\0\1\102\1\101\3\0\1\111\1\112"+
    "\1\113\1\0\12\111\1\0\1\111\1\112\2\111\1\0"+
    "\2\104\4\0\22\111\10\0\2\111\1\246\5\111\11\0"+
    "\1\102\1\101\3\0\1\111\1\112\1\113\1\0\10\111"+
    "\1\247\1\111\1\0\1\111\1\112\2\111\1\0\2\104"+
    "\4\0\22\111\10\0\10\111\11\0\1\102\1\101\3\0"+
    "\1\111\1\112\1\113\1\0\12\111\1\0\1\111\1\112"+
    "\2\111\1\0\2\104\4\0\22\111\10\0\6\111\1\250"+
    "\1\111\1\171\3\172\2\171\1\251\103\171\6\0\1\252"+
    "\103\0\1\173\3\174\3\173\1\175\1\253\101\173\10\0"+
    "\1\254\101\0\1\173\3\174\3\173\1\255\102\173\11\0"+
    "\1\102\1\101\3\0\1\102\1\103\2\0\1\102\1\256"+
    "\10\102\1\0\1\102\1\103\2\102\1\0\2\104\4\0"+
    "\22\102\10\0\10\102\11\0\1\204\1\257\3\0\2\204"+
    "\2\0\12\204\1\0\4\204\7\0\22\204\10\0\10\204"+
    "\11\0\1\110\4\0\2\110\2\0\12\110\1\0\4\110"+
    "\7\0\22\110\10\0\10\110\11\0\1\102\1\101\3\0"+
    "\1\111\1\112\1\113\1\0\12\111\1\0\1\111\1\112"+
    "\2\111\1\0\2\104\4\0\12\111\1\260\7\111\10\0"+
    "\10\111\11\0\1\102\1\101\3\0\1\111\1\112\1\113"+
    "\1\0\2\111\1\261\7\111\1\0\1\111\1\112\2\111"+
    "\1\0\2\104\4\0\22\111\10\0\10\111\11\0\1\102"+
    "\1\101\3\0\1\111\1\112\1\113\1\0\12\111\1\0"+
    "\1\111\1\112\2\111\1\0\2\104\4\0\1\111\1\262"+
    "\20\111\10\0\10\111\11\0\1\102\1\101\3\0\1\111"+
    "\1\112\1\113\1\0\12\111\1\0\1\111\1\112\2\111"+
    "\1\0\2\104\4\0\1\263\21\111\10\0\10\111\11\0"+
    "\1\103\1\114\3\0\1\103\1\264\2\0\4\103\1\265"+
    "\2\103\1\265\2\103\1\0\1\265\2\103\1\264\7\0"+
    "\22\103\10\0\10\103\7\0\1\131\1\0\1\217\1\266"+
    "\3\0\1\217\1\106\2\0\12\217\1\0\1\217\1\221"+
    "\2\217\1\131\2\104\4\0\22\217\10\0\10\217\7\0"+
    "\1\131\1\0\2\220\3\0\1\220\3\0\12\220\1\0"+
    "\1\220\1\131\2\220\1\131\2\104\4\0\22\220\10\0"+
    "\10\220\7\0\1\131\1\0\1\221\1\267\3\0\1\221"+
    "\1\106\2\0\12\221\1\0\4\221\1\131\6\0\22\221"+
    "\10\0\10\221\7\0\1\131\1\0\1\221\1\131\3\0"+
    "\1\221\1\106\2\0\12\221\1\0\4\221\1\131\6\0"+
    "\22\221\10\0\10\221\11\0\1\102\1\101\3\0\1\111"+
    "\1\112\1\113\1\0\12\111\1\0\1\111\1\112\2\111"+
    "\1\0\2\104\4\0\3\111\1\270\16\111\10\0\10\111"+
    "\11\0\1\102\1\101\3\0\1\111\1\112\1\113\1\0"+
    "\12\111\1\0\1\111\1\112\2\111\1\0\2\104\4\0"+
    "\2\111\1\271\17\111\10\0\10\111\11\0\1\102\1\101"+
    "\3\0\1\111\1\112\1\113\1\0\12\111\1\0\1\111"+
    "\1\112\2\111\1\0\2\104\4\0\3\111\1\272\16\111"+
    "\10\0\10\111\11\0\1\102\1\101\3\0\1\111\1\112"+
    "\1\113\1\0\12\111\1\0\1\111\1\112\2\111\1\0"+
    "\2\104\4\0\13\111\1\273\6\111\10\0\10\111\11\0"+
    "\1\102\1\101\3\0\1\111\1\112\1\113\1\0\12\111"+
    "\1\0\1\111\1\112\2\111\1\0\2\104\4\0\1\274"+
    "\21\111\10\0\10\111\11\0\1\102\1\101\3\0\1\111"+
    "\1\112\1\113\1\0\12\111\1\0\1\111\1\112\2\111"+
    "\1\0\2\104\4\0\1\111\1\275\20\111\10\0\10\111"+
    "\11\0\1\102\1\101\3\0\1\111\1\112\1\113\1\0"+
    "\2\111\1\276\7\111\1\0\1\111\1\112\2\111\1\0"+
    "\2\104\4\0\22\111\10\0\10\111\11\0\1\102\1\101"+
    "\3\0\1\111\1\112\1\113\1\0\12\111\1\0\1\111"+
    "\1\112\2\111\1\0\2\104\4\0\4\111\1\277\15\111"+
    "\10\0\10\111\11\0\1\102\1\101\3\0\1\111\1\112"+
    "\1\113\1\0\1\111\1\300\10\111\1\0\1\111\1\112"+
    "\2\111\1\0\2\104\4\0\22\111\10\0\10\111\11\0"+
    "\1\102\1\101\3\0\1\111\1\112\1\113\1\0\12\111"+
    "\1\0\1\111\1\112\2\111\1\0\2\104\4\0\4\111"+
    "\1\301\15\111\10\0\10\111\11\0\1\102\1\101\3\0"+
    "\1\111\1\112\1\113\1\0\12\111\1\0\1\111\1\112"+
    "\2\111\1\0\2\104\4\0\3\111\1\302\16\111\10\0"+
    "\10\111\11\0\1\102\1\101\3\0\1\111\1\112\1\113"+
    "\1\0\12\111\1\0\1\111\1\112\2\111\1\0\2\104"+
    "\4\0\1\303\21\111\10\0\10\111\11\0\1\102\1\101"+
    "\3\0\1\111\1\112\1\113\1\0\12\111\1\0\1\111"+
    "\1\112\2\111\1\0\2\104\4\0\10\111\1\304\11\111"+
    "\10\0\10\111\11\0\1\102\1\101\3\0\1\111\1\112"+
    "\1\113\1\0\12\111\1\0\1\111\1\112\2\111\1\0"+
    "\2\104\4\0\5\111\1\305\14\111\10\0\10\111\11\0"+
    "\1\102\1\101\3\0\1\111\1\112\1\113\1\0\11\111"+
    "\1\306\1\0\1\111\1\112\2\111\1\0\2\104\4\0"+
    "\22\111\10\0\10\111\11\0\1\102\1\101\3\0\1\111"+
    "\1\112\1\113\1\0\11\111\1\307\1\0\1\111\1\112"+
    "\2\111\1\0\2\104\4\0\22\111\10\0\10\111\11\0"+
    "\1\102\1\101\3\0\1\111\1\112\1\113\1\0\12\111"+
    "\1\0\1\111\1\112\2\111\1\0\2\104\4\0\22\111"+
    "\10\0\7\111\1\310\1\173\3\174\3\173\1\255\1\253"+
    "\101\173\11\0\1\102\1\101\3\0\1\102\1\103\2\0"+
    "\2\102\1\311\7\102\1\0\1\102\1\103\2\102\1\0"+
    "\2\104\4\0\22\102\10\0\10\102\11\0\1\102\1\101"+
    "\3\0\1\111\1\112\1\113\1\0\12\111\1\0\1\111"+
    "\1\112\2\111\1\0\2\104\4\0\1\312\21\111\10\0"+
    "\10\111\11\0\1\102\1\101\3\0\1\111\1\112\1\113"+
    "\1\0\12\111\1\0\1\111\1\112\2\111\1\0\2\104"+
    "\4\0\3\111\1\313\16\111\10\0\10\111\11\0\1\102"+
    "\1\101\3\0\1\111\1\112\1\113\1\0\12\111\1\0"+
    "\1\111\1\112\2\111\1\0\2\104\4\0\12\111\1\314"+
    "\7\111\10\0\10\111\11\0\1\102\1\101\3\0\1\111"+
    "\1\112\1\113\1\0\12\111\1\0\1\111\1\112\2\111"+
    "\1\0\2\104\4\0\12\111\1\315\7\111\10\0\10\111"+
    "\11\0\1\103\1\114\3\0\2\103\2\0\4\103\1\265"+
    "\2\103\1\265\2\103\1\0\1\265\3\103\7\0\22\103"+
    "\10\0\10\103\11\0\1\102\1\101\3\0\1\111\1\112"+
    "\1\113\1\0\12\111\1\0\1\111\1\112\2\111\1\0"+
    "\2\104\4\0\1\111\1\316\20\111\10\0\10\111\11\0"+
    "\1\102\1\101\3\0\1\111\1\112\1\113\1\0\12\111"+
    "\1\0\1\111\1\112\2\111\1\0\2\104\4\0\15\111"+
    "\1\317\4\111\10\0\10\111\11\0\1\102\1\101\3\0"+
    "\1\111\1\112\1\113\1\0\12\111\1\0\1\111\1\112"+
    "\2\111\1\0\2\104\4\0\10\111\1\320\11\111\10\0"+
    "\10\111\11\0\1\102\1\101\3\0\1\111\1\112\1\113"+
    "\1\0\12\111\1\0\1\111\1\112\2\111\1\0\2\104"+
    "\4\0\2\111\1\321\17\111\10\0\10\111\11\0\1\102"+
    "\1\101\3\0\1\111\1\112\1\113\1\0\1\111\1\322"+
    "\10\111\1\0\1\111\1\112\2\111\1\0\2\104\4\0"+
    "\22\111\10\0\10\111\11\0\1\102\1\101\3\0\1\111"+
    "\1\112\1\113\1\0\12\111\1\0\1\111\1\112\2\111"+
    "\1\0\2\104\4\0\3\111\1\323\16\111\10\0\10\111"+
    "\11\0\1\102\1\101\3\0\1\111\1\112\1\113\1\0"+
    "\12\111\1\0\1\111\1\112\2\111\1\0\2\104\4\0"+
    "\22\111\10\0\1\111\1\324\6\111\11\0\1\102\1\101"+
    "\3\0\1\111\1\112\1\113\1\0\12\111\1\0\1\111"+
    "\1\112\2\111\1\0\2\104\4\0\22\111\10\0\1\111"+
    "\1\325\6\111\11\0\1\102\1\101\3\0\1\102\1\103"+
    "\2\0\3\102\1\326\6\102\1\0\1\102\1\103\2\102"+
    "\1\0\2\104\4\0\22\102\10\0\10\102\11\0\1\102"+
    "\1\101\3\0\1\111\1\112\1\113\1\0\1\111\1\327"+
    "\10\111\1\0\1\111\1\112\2\111\1\0\2\104\4\0"+
    "\22\111\10\0\10\111\11\0\1\102\1\101\3\0\1\111"+
    "\1\112\1\113\1\0\12\111\1\0\1\111\1\112\2\111"+
    "\1\0\2\104\4\0\3\111\1\330\16\111\10\0\10\111"+
    "\11\0\1\102\1\101\3\0\1\111\1\112\1\113\1\0"+
    "\3\111\1\331\6\111\1\0\1\111\1\112\2\111\1\0"+
    "\2\104\4\0\22\111\10\0\10\111\11\0\1\102\1\101"+
    "\3\0\1\111\1\112\1\113\1\0\12\111\1\0\1\111"+
    "\1\112\2\111\1\0\2\104\4\0\10\111\1\332\11\111"+
    "\10\0\10\111\11\0\1\102\1\101\3\0\1\111\1\112"+
    "\1\113\1\0\12\111\1\0\1\111\1\112\2\111\1\0"+
    "\2\104\4\0\5\111\1\333\14\111\10\0\10\111\11\0"+
    "\1\102\1\101\3\0\1\111\1\112\1\113\1\0\12\111"+
    "\1\0\1\111\1\112\2\111\1\0\2\104\4\0\10\111"+
    "\1\334\11\111\10\0\10\111\11\0\1\335\1\101\3\0"+
    "\1\102\1\103\2\0\12\102\1\0\1\102\1\103\2\102"+
    "\1\0\2\104\4\0\22\102\10\0\10\102\11\0\1\102"+
    "\1\101\3\0\1\111\1\112\1\113\1\0\12\111\1\0"+
    "\1\111\1\112\2\111\1\0\2\104\4\0\13\111\1\336"+
    "\6\111\10\0\10\111\11\0\1\102\1\101\3\0\1\111"+
    "\1\112\1\113\1\0\12\111\1\0\1\111\1\112\2\111"+
    "\1\0\2\104\4\0\1\337\21\111\10\0\10\111\11\0"+
    "\1\102\1\101\3\0\1\111\1\112\1\113\1\0\12\111"+
    "\1\0\1\111\1\112\2\111\1\0\2\104\4\0\2\111"+
    "\1\340\17\111\10\0\10\111\11\0\1\341\1\101\3\0"+
    "\1\341\1\103\2\0\12\341\1\0\1\341\1\103\1\341"+
    "\1\102\1\0\2\104\4\0\22\341\10\0\10\341\11\0"+
    "\1\102\1\101\3\0\1\111\1\112\1\113\1\0\12\111"+
    "\1\0\1\111\1\112\2\111\1\0\2\104\4\0\10\111"+
    "\1\342\11\111\10\0\10\111\11\0\1\102\1\101\3\0"+
    "\1\111\1\112\1\113\1\0\12\111\1\0\1\111\1\112"+
    "\2\111\1\0\2\104\4\0\3\111\1\343\16\111\10\0"+
    "\10\111";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11766];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\62\1\2\0\1\11\3\1\1\11\10\1\1\0"+
    "\3\1\2\0\1\1\3\0\13\1\1\0\40\1\5\0"+
    "\7\1\1\0\1\11\7\1\1\0\33\1\1\11\1\1"+
    "\1\11\1\0\6\1\1\0\57\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _FishLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _FishLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 70: break;
          case 2: 
            { return NEWLINE;
            } 
            // fall through
          case 71: break;
          case 3: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 72: break;
          case 4: 
            { return IDENTIFIER;
            } 
            // fall through
          case 73: break;
          case 5: 
            { return COLON;
            } 
            // fall through
          case 74: break;
          case 6: 
            { return INT;
            } 
            // fall through
          case 75: break;
          case 7: 
            { return COMMA;
            } 
            // fall through
          case 76: break;
          case 8: 
            { return TB;
            } 
            // fall through
          case 77: break;
          case 9: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 78: break;
          case 10: 
            { return WILDCARD;
            } 
            // fall through
          case 79: break;
          case 11: 
            { return PIPE;
            } 
            // fall through
          case 80: break;
          case 12: 
            { return SEMI;
            } 
            // fall through
          case 81: break;
          case 13: 
            { return LPAREN;
            } 
            // fall through
          case 82: break;
          case 14: 
            { return RPAREN;
            } 
            // fall through
          case 83: break;
          case 15: 
            { return LCURLY;
            } 
            // fall through
          case 84: break;
          case 16: 
            { return RCURLY;
            } 
            // fall through
          case 85: break;
          case 17: 
            { return LBRAC;
            } 
            // fall through
          case 86: break;
          case 18: 
            { return RBRAC;
            } 
            // fall through
          case 87: break;
          case 19: 
            { return ENV_VAR;
            } 
            // fall through
          case 88: break;
          case 20: 
            { return ESCAPED_VALUE;
            } 
            // fall through
          case 89: break;
          case 21: 
            { return BINARY_NUMBER;
            } 
            // fall through
          case 90: break;
          case 22: 
            { return PATH;
            } 
            // fall through
          case 91: break;
          case 23: 
            { return IF;
            } 
            // fall through
          case 92: break;
          case 24: 
            { return IN;
            } 
            // fall through
          case 93: break;
          case 25: 
            { return FLOAT;
            } 
            // fall through
          case 94: break;
          case 26: 
            { return ARG;
            } 
            // fall through
          case 95: break;
          case 27: 
            { return RM;
            } 
            // fall through
          case 96: break;
          case 28: 
            { return LS;
            } 
            // fall through
          case 97: break;
          case 29: 
            { return CD;
            } 
            // fall through
          case 98: break;
          case 30: 
            { return CP;
            } 
            // fall through
          case 99: break;
          case 31: 
            { return OR;
            } 
            // fall through
          case 100: break;
          case 32: 
            { return MV;
            } 
            // fall through
          case 101: break;
          case 33: 
            { return HEX_NUMBER;
            } 
            // fall through
          case 102: break;
          case 34: 
            { return UNICODE_CHAR;
            } 
            // fall through
          case 103: break;
          case 35: 
            { return CHAR;
            } 
            // fall through
          case 104: break;
          case 36: 
            { return HPATH;
            } 
            // fall through
          case 105: break;
          case 37: 
            { return SPATH;
            } 
            // fall through
          case 106: break;
          case 38: 
            { return URI;
            } 
            // fall through
          case 107: break;
          case 39: 
            { return FOR;
            } 
            // fall through
          case 108: break;
          case 40: 
            { return SET;
            } 
            // fall through
          case 109: break;
          case 41: 
            { return END;
            } 
            // fall through
          case 110: break;
          case 42: 
            { return AND;
            } 
            // fall through
          case 111: break;
          case 43: 
            { return NOT;
            } 
            // fall through
          case 112: break;
          case 44: 
            { return CAT;
            } 
            // fall through
          case 113: break;
          case 45: 
            { return MAN;
            } 
            // fall through
          case 114: break;
          case 46: 
            { return SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 115: break;
          case 47: 
            { return DOUBLE_QUOTED_STRING;
            } 
            // fall through
          case 116: break;
          case 48: 
            { return TRUE;
            } 
            // fall through
          case 117: break;
          case 49: 
            { return ELSE;
            } 
            // fall through
          case 118: break;
          case 50: 
            { return ECHO;
            } 
            // fall through
          case 119: break;
          case 51: 
            { return EXIT;
            } 
            // fall through
          case 120: break;
          case 52: 
            { return ABBR;
            } 
            // fall through
          case 121: break;
          case 53: 
            { return LESS;
            } 
            // fall through
          case 122: break;
          case 54: 
            { return CASE;
            } 
            // fall through
          case 123: break;
          case 55: 
            { return OPEN;
            } 
            // fall through
          case 124: break;
          case 56: 
            { return FIND;
            } 
            // fall through
          case 125: break;
          case 57: 
            { return FALSE;
            } 
            // fall through
          case 126: break;
          case 58: 
            { return BREAK;
            } 
            // fall through
          case 127: break;
          case 59: 
            { return BEGIN;
            } 
            // fall through
          case 128: break;
          case 60: 
            { return WHILE;
            } 
            // fall through
          case 129: break;
          case 61: 
            { return WHICH;
            } 
            // fall through
          case 130: break;
          case 62: 
            { return TOUCH;
            } 
            // fall through
          case 131: break;
          case 63: 
            { return SOURCE;
            } 
            // fall through
          case 132: break;
          case 64: 
            { return SWITCH;
            } 
            // fall through
          case 133: break;
          case 65: 
            { return RETURN;
            } 
            // fall through
          case 134: break;
          case 66: 
            { return DEFAULT;
            } 
            // fall through
          case 135: break;
          case 67: 
            { return BUILTIN_FUNCTION;
            } 
            // fall through
          case 136: break;
          case 68: 
            { return FUNCTION;
            } 
            // fall through
          case 137: break;
          case 69: 
            { return CONTINUE;
            } 
            // fall through
          case 138: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
